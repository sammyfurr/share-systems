<!-- This is a static file -->
<!-- served from your routes in server.js -->

<!DOCTYPE html>
<html>
  <head>
    <%- include('../partials/head') %>
  </head>
  
  <body>
    <header>
      <%- include('../partials/header') %>
    </header>

    <main>
        <div id="students" class="row">
          <% for (const student of students) { %>
            <div class="student" id=<%= student._id %> onclick="selectStudent(this.id)">
              <% if (student.githubDisplayName != null) { %> 
                <p><%= user.githubDisplayName %></p>
              <% } else { %>
                <%= student.githubUsername %> 
              <% } %>
              <p></p>
            </div>
          <% } %>
        </div>
        <div id="container"></div>
    </main>
    
    <script src="/socket.io-client/dist/socket.io.js"></script>
    <script src="/monaco-editor/min/vs/loader.js"></script>
    <script>
      var socket = io('/teach');
      function selectStudent(id){
        console.log(id);
        socket.emit('select', {id: id});
      }
      require.config({ paths: { 'vs': '/monaco-editor/min/vs' }});

      require(['vs/editor/editor.main'], function() {
  	  // Register a new language
  	  monaco.languages.register({ id: 'armv8' });
	  
  	  // Register a tokens provider for the language
  	  monaco.languages.setMonarchTokensProvider('armv8', {
  	      tokenizer: {
  		  root: [
  		      [/\w+(?=:)/, 'label'],
  		      [/\.\w+/, 'dot'],
  		      [/;.*|\/\*.*\*\//, 'comment'],
  		  ]
  	      }
  	  });
	  
  	  // Define a new theme that contains only rules that match this language
  	  monaco.editor.defineTheme('armv8theme', {
  	      base: 'vs',
  	      inherit: false,
  	      rules: [
  		  { token: 'label', foreground: '#268bd2' },
  		  { token: 'dot', foreground: '#cb4b16' },
  		  { token: 'comment', foreground: '#657b83' },
  	      ],
  	  });
      
  	  var editor = monaco.editor.create(document.getElementById('container'), {
  	      theme: 'armv8theme',
  	      language: 'armv8'
  	  });
  	  editor.getModel().applyEdits([{
  	      range: monaco.Range.fromPositions(editor.getPosition())
  	  }]);
        
	      socket.on('code', (code) => {
          /*editor.getModel().applyEdits([{
            range: monaco.Range.fromPositions({startLineNumber: 0, startColumn: 0, endLineNumber: 0, endColumn: 0}),
            text: code
          }]);*/
          editor.getModel().setValue(code);
        });
      });
    </script>

  </body>
</html>
